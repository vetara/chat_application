{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\chat_application\\\\src\\\\components\\\\ChatFeed.jsx\";\nimport MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  //Props To Be Restructured\n  const {\n    chats,\n    activeChat,\n    userName,\n    messages\n  } = props; //Current Chat Variable\n\n  const chat = chats && chats[activeChat];\n  /* If chats exists, get active chat */\n  //Storing Messages\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n    /* Take Keys (ID's of specific messages) From Messages & Place Them In This Component */\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      /* Basically Locating The Last Message*/\n\n      const isMyMessage = userName === message.sender.username;\n      /* Determining If Sender Of Message Is The Logged In User*/\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-block\",\n          children: isMyMessage\n          /* If Message Is Sent By Logged In User, Render MyMessage Component */\n          ?\n          /*#__PURE__*/\n          _jsxDEV(MyMessage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(TheirMessage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 31\n          }, this)\n          /* Else, Render TheirMessage Component */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-receipts\",\n          style: {\n            marginRight: isMyMessage ? '18px' : '0px',\n            marginLeft: isMyMessage ? '0px' : '68px'\n          },\n          children: \"read-receipts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, 'msg_${index}', true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this);\n    });\n  }; //Checking Whether There Are Chats To Render\n\n\n  if (!chat) {\n    return 'Loading...';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: chat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-subtitle\",\n        children: chat.people.map(person => ' ${person.person.username')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["C:/xampp/htdocs/chat_application/src/components/ChatFeed.jsx"],"names":["MessageForm","MyMessage","TheirMessage","ChatFeed","props","chats","activeChat","userName","messages","chat","renderMessages","keys","Object","map","key","index","message","lastMessageKey","isMyMessage","sender","username","width","marginRight","marginLeft","title","people","person","height"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,MAA4CJ,KAAlD,CAFwB,CAIxB;;AACA,QAAMK,IAAI,GAAGJ,KAAK,IAAIA,KAAK,CAACC,UAAD,CAA3B;AAAyC;AAEzC;;AACA,QAAMI,cAAc,GAAG,MAAM;AACzB,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,QAAZ,CAAb;AAAoC;;AACpC,WAAOG,IAAI,CAACE,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5B,YAAMC,OAAO,GAAGR,QAAQ,CAACM,GAAD,CAAxB;AACA,YAAMG,cAAc,GAAGF,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqBJ,IAAI,CAACI,KAAK,GAAC,CAAP,CAAhD;AAA2D;;AAC3D,YAAMG,WAAW,GAAGX,QAAQ,KAAKS,OAAO,CAACG,MAAR,CAAeC,QAAhD;AAA0D;;AAE1D,0BACI;AAA0B,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAjC;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,oBAEQH;AAAoB;AAAT;AAAA;AACT,kBAAC,SAAD;AAAA;AAAA;AAAA;AAAA,kBADS,gBAET,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAkB;;AAJ5B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAK,UAAA,SAAS,EAAC,eAAf;AAA+B,UAAA,KAAK,EAAE;AAACI,YAAAA,WAAW,EAAEJ,WAAW,GAAG,MAAH,GAAY,KAArC;AAA4CK,YAAAA,UAAU,EAAEL,WAAW,GAAG,KAAH,GAAW;AAA9E,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA,SAAU,cAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAcH,KAnBM,CAAP;AAoBH,GAtBD,CARwB,CAgCxB;;;AACA,MAAI,CAACT,IAAL,EAAW;AACP,WAAO,YAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBAA8BA,IAAI,CAACe;AAAnC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBACKf,IAAI,CAACgB,MAAL,CAAYZ,GAAZ,CAAiBa,MAAD,IAAY,2BAA5B;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAOKhB,cAAc,EAPnB,eAQI;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,MAAM,EAAE;AAAV;AAAZ;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAjDD;;KAAMxB,Q;AAmDN,eAAeA,QAAf","sourcesContent":["import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    //Props To Be Restructured\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    //Current Chat Variable\r\n    const chat = chats && chats[activeChat]; /* If chats exists, get active chat */\r\n    \r\n    //Storing Messages\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages); /* Take Keys (ID's of specific messages) From Messages & Place Them In This Component */\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1]; /* Basically Locating The Last Message*/\r\n            const isMyMessage = userName === message.sender.username; /* Determining If Sender Of Message Is The Logged In User*/\r\n\r\n            return (\r\n                <div key={'msg_${index}'} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage         /* If Message Is Sent By Logged In User, Render MyMessage Component */\r\n                            ? <MyMessage />\r\n                            : <TheirMessage />  /* Else, Render TheirMessage Component */\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\r\n                        read-receipts\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    //Checking Whether There Are Chats To Render\r\n    if (!chat) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{ chat.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => ' ${person.person.username')}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px'}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed;"]},"metadata":{},"sourceType":"module"}