{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\chat_application\\\\src\\\\components\\\\ChatFeed.jsx\";\nimport MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  //Props To Be Restructured\n  const {\n    chats,\n    activeChat,\n    userName,\n    messages\n  } = props; //Current Chat Variable\n\n  const chat = chats && chats[activeChat];\n  /* If chats exists, get active chat */\n  //Storing Messages\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n    /* Take Keys (ID's of specific messages) From Messages & Place Them In This Component */\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      /* Basically Locating The Last Message*/\n\n      const isMyMessage = userName === message.sender.username;\n      /* Determining If Sender Of Message Is The Logged In User*/\n    });\n  };\n\n  renderMessages();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ChatFeed\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["C:/xampp/htdocs/chat_application/src/components/ChatFeed.jsx"],"names":["MessageForm","MyMessage","TheirMessage","ChatFeed","props","chats","activeChat","userName","messages","chat","renderMessages","keys","Object","map","key","index","message","lastMessageKey","isMyMessage","sender","username"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,MAA4CJ,KAAlD,CAFwB,CAIxB;;AACA,QAAMK,IAAI,GAAGJ,KAAK,IAAIA,KAAK,CAACC,UAAD,CAA3B;AAAyC;AAEzC;;AACA,QAAMI,cAAc,GAAG,MAAM;AACzB,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,QAAZ,CAAb;AAAoC;;AACpC,WAAOG,IAAI,CAACE,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5B,YAAMC,OAAO,GAAGR,QAAQ,CAACM,GAAD,CAAxB;AACA,YAAMG,cAAc,GAAGF,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqBJ,IAAI,CAACI,KAAK,GAAC,CAAP,CAAhD;AAA2D;;AAC3D,YAAMG,WAAW,GAAGX,QAAQ,KAAKS,OAAO,CAACG,MAAR,CAAeC,QAAhD;AAA0D;AAC7D,KAJM,CAAP;AAKH,GAPD;;AASAV,EAAAA,cAAc;AAEd,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAtBD;;KAAMP,Q;AAwBN,eAAeA,QAAf","sourcesContent":["import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    //Props To Be Restructured\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    //Current Chat Variable\r\n    const chat = chats && chats[activeChat]; /* If chats exists, get active chat */\r\n    \r\n    //Storing Messages\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages); /* Take Keys (ID's of specific messages) From Messages & Place Them In This Component */\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1]; /* Basically Locating The Last Message*/\r\n            const isMyMessage = userName === message.sender.username; /* Determining If Sender Of Message Is The Logged In User*/\r\n        })\r\n    }\r\n\r\n    renderMessages();\r\n\r\n    return (\r\n        <div>ChatFeed</div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed;"]},"metadata":{},"sourceType":"module"}