{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\chat_application\\\\src\\\\components\\\\ChatFeed.jsx\";\nimport MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  //Props To Be Restructured\n  const {\n    chats,\n    activeChat,\n    userName,\n    messages\n  } = props; //Current Chat Variable\n\n  const chat = chats && chats[activeChat];\n  /* If chats exists, get active chat */\n  //Render Only Those People Who Have Read The Message\n\n  const renderReadReceipts = (message, isMyMessage) => {\n    return chat.people.map((person, index) => {\n      var _person$person$avatar, _person$person$avatar2;\n\n      return person.last_read === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"read-receipt\",\n        style: {\n          float: isMyMessage ? 'right' : 'left',\n          backgroundImage: `url(${(_person$person$avatar = person.person.avatar) === null || _person$person$avatar === void 0 ? void 0 : (_person$person$avatar2 = _person$person$avatar.sender) === null || _person$person$avatar2 === void 0 ? void 0 : _person$person$avatar2.avatar})`\n        }\n      }, `read_${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this);\n    });\n  }; //Rendering Messages\n\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n    /* Take Keys (ID's of specific messages) From Messages & Place Them In This Component */\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      /* Basically Locating The Last Message*/\n\n      const isMyMessage = userName === message.sender.username;\n      /* Determining If Sender Of Message Is The Logged In User*/\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-block\",\n          children: isMyMessage\n          /* If Message Is Sent By Logged In User, Render MyMessage Component */\n          ?\n          /*#__PURE__*/\n          _jsxDEV(MyMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(TheirMessage, {\n            message: message,\n            lastMessage: messages[lastMessageKey]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 31\n          }, this)\n          /* Else, Render TheirMessage Component */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-receipts\",\n          style: {\n            marginRight: isMyMessage ? '18px' : '0px',\n            marginLeft: isMyMessage ? '0px' : '68px'\n          },\n          children: renderReadReceipts(messages, isMyMessage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, `msg_${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this);\n    });\n  }; //Checking Whether There Are Chats To Render\n\n\n  if (!chat) {\n    return 'Loading...';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: chat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-subtitle\",\n        children: chat.people.map(person => ` ${person.person.username}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-form-container\",\n      children: /*#__PURE__*/_jsxDEV(MessageForm, { ...props,\n        chatId: activeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["C:/xampp/htdocs/chat_application/src/components/ChatFeed.jsx"],"names":["MessageForm","MyMessage","TheirMessage","ChatFeed","props","chats","activeChat","userName","messages","chat","renderReadReceipts","message","isMyMessage","people","map","person","index","last_read","id","float","backgroundImage","avatar","sender","renderMessages","keys","Object","key","lastMessageKey","username","width","marginRight","marginLeft","title","height"],"mappings":"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","sourcesContent":["import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    //Props To Be Restructured\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    //Current Chat Variable\r\n    const chat = chats && chats[activeChat]; /* If chats exists, get active chat */\r\n\r\n    //Render Only Those People Who Have Read The Message\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${person.person.avatar?.sender?.avatar})`\r\n                }}\r\n            />\r\n        ))\r\n    }\r\n    \r\n    //Rendering Messages\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages); /* Take Keys (ID's of specific messages) From Messages & Place Them In This Component */\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1]; /* Basically Locating The Last Message*/\r\n            const isMyMessage = userName === message.sender.username; /* Determining If Sender Of Message Is The Logged In User*/\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage         /* If Message Is Sent By Logged In User, Render MyMessage Component */\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />  /* Else, Render TheirMessage Component */\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\r\n                        {renderReadReceipts(messages, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    //Checking Whether There Are Chats To Render\r\n    if (!chat) {\r\n        return 'Loading...';\r\n    } \r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{ chat.title }</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => ` ${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm { ...props} chatId={activeChat}/> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed;"]},"metadata":{},"sourceType":"module"}